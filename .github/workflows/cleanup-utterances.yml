name: Clean Test Issues and Update Counter

on:
  workflow_dispatch: # Manual run
  schedule:
    - cron: '0 * * * *' # Run every hour

permissions:
  issues: write  # Required to close and lock issues
  contents: read  # Required to read the repository's content

jobs:
  clean-and-update:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup GitHub CLI
        uses: cli/setup-gh@v1

      - name: Process test issues
        id: process_issues
        run: |
          echo "üìã Processing 'test-comment' labeled issues..."
          
          # Get all test issues in one API call to reduce API usage
          TEST_ISSUES=$(gh issue list --label "test-comment" --state open --json number,title --limit 100)
          TEST_COUNT=$(echo "$TEST_ISSUES" | jq length)
          echo "Found $TEST_COUNT test issues to process"
          
          # Process each test issue
          echo "$TEST_ISSUES" | jq -c '.[]' | while read -r issue; do
            NUM=$(echo "$issue" | jq -r '.number')
            TITLE=$(echo "$issue" | jq -r '.title')
            
            echo "üîÑ Processing test issue #$NUM: '$TITLE'"
            
            # Add a comment explaining the closure
            gh issue comment "$NUM" --body "This issue has been identified as a test/duplicate issue and will be automatically closed and locked."
            
            # Close the issue
            if gh issue close "$NUM" --reason "not_planned"; then
              echo "‚úÖ Successfully closed issue #$NUM"
            else
              echo "‚ö†Ô∏è Failed to close issue #$NUM, it may already be closed"
            fi
            
            # Lock the issue
            if gh issue lock "$NUM" --reason "resolved"; then
              echo "üîí Successfully locked issue #$NUM"
            else
              echo "‚ö†Ô∏è Failed to lock issue #$NUM"
            fi
          done
          
          # Count real issues (excluding test issues)
          REAL_ISSUES=$(gh issue list --state open --json number,labels --jq '[.[] | select(.labels | map(.name) | index("test-comment") | not)] | length')
          echo "open_issue_count=$REAL_ISSUES" >> $GITHUB_OUTPUT
          echo "üìä Found $REAL_ISSUES real open issues"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update Counter Issue
        run: |
          echo "üîÑ Updating counter issue..."
          
          # Find the counter issue
          COUNTER_ISSUE=$(gh issue list --state open --search "Comment Thread Counter in:title" --json number,title --limit 1)
          
          if [ "$(echo "$COUNTER_ISSUE" | jq length)" -eq "0" ]; then
            echo "‚ö†Ô∏è No 'Comment Thread Counter' issue found, exiting..."
            exit 1
          fi
          
          ISSUE_NUMBER=$(echo "$COUNTER_ISSUE" | jq -r '.[0].number')
          ISSUE_TITLE=$(echo "$COUNTER_ISSUE" | jq -r '.[0].title')
          echo "üìç Found counter issue #$ISSUE_NUMBER: '$ISSUE_TITLE'"
          
          # Update the counter issue
          COUNT=${{ steps.process_issues.outputs.open_issue_count }}
          TIMESTAMP=$(date -u +"%Y-%m-%d %H:%M:%S UTC")
          BODY="üìä **Current active comment threads:** $COUNT\n\n_Last updated: $TIMESTAMP by automated workflow_"
          
          echo -e "$BODY" > tmp.md
          
          if gh issue edit "$ISSUE_NUMBER" --body-file tmp.md; then
            echo "‚úÖ Successfully updated counter issue"
          else
            echo "‚ùå Failed to update counter issue"
            exit 1
          fi
          
          rm tmp.md
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}









